generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Phan he 1: Customer

model Customer {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  accountNumber     String              @unique @map("account_number")
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  balance           BigInt              @default(0)
  CustomerRecipient CustomerRecipient[]
  Transaction       Transaction[]

  createdInvoices  Invoice[]      @relation("createdInvoices")
  receivedInvoices Invoice[]      @relation("receivedInvoices")
  notification     Notification[]
  token            Token[]
  recipient        Recipient[]    @relation("internalBankCustomer")

  @@map("customers")
}

model Recipient {
  id                String              @id @default(uuid())
  accountNumber     String              @unique @map("account_number")
  mnemonicName      String?             @map("mnemonic_name")
  customerRecipient CustomerRecipient[]
  transactions      Transaction[]

  internalBankCustomerId String?   @map("internal_bank_customer_id")
  internalBankCustomer   Customer? @relation("internalBankCustomer", fields: [internalBankCustomerId], references: [id])

  @@map("recipients")
}

model CustomerRecipient {
  id          BigInt    @id @default(autoincrement())
  customerId  String    @map("customer_id")
  recipientId String    @map("recipient_id")
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  recipient   Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([customerId, recipientId])
  @@index([customerId])
  @@map("customer_recipient")
}

enum TransactionType {
  INTERNAL
  EXTERNAL
}

model Transaction {
  id          BigInt          @id @default(autoincrement())
  customerId  String          @map("customer_id")
  recipientId String?         @map("recipient_id")
  amount      BigInt
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  deletedAt   DateTime?       @map("deleted_at")
  type        TransactionType
  customer    Customer        @relation(fields: [customerId], references: [id])
  recipient   Recipient?      @relation(fields: [recipientId], references: [id])
  // TODO: save external transaction data

  @@index([customerId])
  @@map("transactions")
}

model Invoice {
  id     BigInt @id @default(autoincrement())
  amount BigInt

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  message String?

  receiverId String   @map("receiver_id")
  customer   Customer @relation("createdInvoices", fields: [receiverId], references: [id])
  creatorId  String   @map("created_by")
  creator    Customer @relation("receivedInvoices", fields: [creatorId], references: [id])

  isPaid Boolean   @default(false) @map("is_paid")
  paidAt DateTime? @map("paid_at")

  @@index([creatorId, receiverId])
  @@map("invoices")
}

enum NotificationType {
  DEBT_CREATED
  DEBT_PAID
  DEBT_DELETED
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime @map("deleted_at")

  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  type NotificationType

  title String
  text  String
  url   String?

  isRead Boolean   @default(false) @map("is_read")
  readAt DateTime? @map("read_at")

  @@index([customerId])
  @@map("notifications")
}

enum EmployeeType {
  ADMIN
  EMPLOYEE
}

// Phan he 2: Employee
model Employee {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  firstName String @map("first_name")
  lastName  String @map("last_name")

  employeeType EmployeeType

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  employeeLog EmployeeLog[]

  @@map("employees")
}

enum EmployeeLogType {
  CUSTOMER_CREATED
  CUSTOMER_DEPOSIT
  CUSTOMER_VIEW_TRANSACTION
}

model EmployeeLog {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime @map("deleted_at")

  employeeId String   @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])

  type EmployeeLogType
  data String

  @@index([employeeId])
  @@map("employee_logs")
}

model Statistic {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime @map("deleted_at")

  totalMoneyDelivered BigInt @map("total_money_delivered")

  @@map("statistics")
}

enum TokenType {
  RESET_PASSWORD
  VERIFY_EMAIL
  REFRESH
}

model Token {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  token     String
  type      TokenType
  expiredAt DateTime  @map("expired_at")

  isBlacklisted Boolean @default(false) @map("is_blacklisted")

  customerId String?   @map("customer_id")
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("tokens")
}
